"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[105],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4920:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(2081),a=(n(9496),n(9613));const o={},i="cut",s={unversionedId:"cut/readme",id:"cut/readme",title:"cut",description:"shape = cut({ source, cases })",source:"@site/../src/cut/readme.md",sourceDirName:"cut",slug:"/cut/",permalink:"/methods/cut/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/cut/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"condition",permalink:"/methods/condition/"},next:{title:"debounce",permalink:"/methods/debounce/"}},c={},l=[{value:"<code>shape = cut({ source, cases })</code>",id:"shape--cut-source-cases-",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Formulae",id:"formulae",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Extract passed fields from optional object",id:"extract-passed-fields-from-optional-object",level:4},{value:"Cut WebSocket events into effector events",id:"cut-websocket-events-into-effector-events",level:4}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cut"},"cut"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { cut } from 'patronum/cut';\n")),(0,a.kt)("h2",{id:"shape--cut-source-cases-"},(0,a.kt)("inlineCode",{parentName:"h2"},"shape = cut({ source, cases })")),(0,a.kt)("h3",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"The method is similar to ",(0,a.kt)("a",{parentName:"p",href:"https://effector.dev/docs/api/effector/split-map"},(0,a.kt)("inlineCode",{parentName:"a"},"split-map")),", but do not stop on first case but processes them all.\nIt is useful when you want to have cut some event into smaller events."),(0,a.kt)("h3",{id:"formulae"},"Formulae"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"shape = cut({ source, cases });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"On each ",(0,a.kt)("inlineCode",{parentName:"li"},"source")," trigger, call each function in ",(0,a.kt)("inlineCode",{parentName:"li"},"cases")," object one after another, and call event in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")," with the same name as function in ",(0,a.kt)("inlineCode",{parentName:"li"},"cases")," object if ",(0,a.kt)("inlineCode",{parentName:"li"},"case")," function returns non undefined."),(0,a.kt)("li",{parentName:"ul"},"If all functions returned value ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),"  event ",(0,a.kt)("inlineCode",{parentName:"li"},"__")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")," should be triggered")),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"source")," (",(0,a.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/event"},(0,a.kt)("em",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"em"},"Event")))," | ",(0,a.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/store"},(0,a.kt)("em",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"em"},"Store")))," | ",(0,a.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/effect"},(0,a.kt)("em",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"em"},"Effect"))),") \u2014 Source unit, data from this unit passed to each function in ",(0,a.kt)("inlineCode",{parentName:"li"},"cases")," object and ",(0,a.kt)("inlineCode",{parentName:"li"},"__")," event in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")," as is"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"cases")," (",(0,a.kt)("inlineCode",{parentName:"li"},"{ [key: string]: (payload: T) => any | void }"),") \u2014 Object of functions. Function receives one argument is a payload from ",(0,a.kt)("inlineCode",{parentName:"li"},"source"),", should return any value or ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"))),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shape")," (",(0,a.kt)("inlineCode",{parentName:"li"},"{ [key: string]: Event<any>; __: Event<T> }"),") \u2014 Object of events, with the same structure as ",(0,a.kt)("inlineCode",{parentName:"li"},"cases"),", but with the ",(0,a.kt)("em",{parentName:"li"},"default")," event ",(0,a.kt)("inlineCode",{parentName:"li"},"__"),", that triggered when each other function returns ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"))),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("h4",{id:"extract-passed-fields-from-optional-object"},"Extract passed fields from optional object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEvent } from 'effector';\nimport { cut } from 'patronum/cut';\n\nconst event = createEvent<object>();\n\nconst shape = cut({\n  source: event,\n  cases: {\n    getType: (input) => input.type,\n    getDemo: (input) => input.demo,\n  },\n});\n\nshape.getType.watch((type) => console.log('TYPE', type));\nshape.getDemo.watch((demo) => console.log('DEMO', demo));\nshape.__.watch((other) => console.log('OTHER', other));\n\nevent({ type: 'demo' });\n// => TYPE demo\n\nevent({ demo: 5 });\n// => DEMO 5\n\nevent({ type: 'demo', demo: 5 });\n// => TYPE demo\n// => DEMO 5\n\nevent({});\n// => OTHER {}\n")),(0,a.kt)("h4",{id:"cut-websocket-events-into-effector-events"},"Cut WebSocket events into effector events"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEvent } from 'effector';\nimport { cut } from 'patronum/cut';\n\ntype WSInitEvent =  { type: 'init'; key: string };\ntype WSIncrementEvent =  { type: 'increment'; count: number; name: string };\ntype WSResetEvent =   { type: 'reset'; name: string };\ntype WSEvent =\n  | WSInitEvent\n  | WSIncrementEvent\n  | WSResetEvent\n\nexport const websocketEventReceived = createEvent<WSEvent[]>();\n\nconst { init, increment, reset, __ } = cut({\n  source: websocketEventReceived,\n  cases: {\n    init: (events) => events.filter((wsEvent: WSEvent): wsEvent is WSInitEvent => wsEvent.type === 'init'),\n    increment: (events) => events.filter((wsEvent: WSEvent): wsEvent is WSIncrementEvent => wsEvent.type === 'increment'),\n    reset: (events) => events.filter((wsEvent: WSEvent): wsEvent is WSResetEvent => wsEvent.type === 'reset'),\n  },\n});\n\ninit.watch(initEvents => {\n  console.info(`inited for ${initEvents.length}`);\n});\n\nincrement.watch(incrementEvents => {\n  console.info('should be incremented', incrementEvents.map(wsEvent => wsEvent.count).reduce((a, b) => a + b));\n});\n\nwebsocketEventReceived([{ type: 'increment', name: 'demo', count: 5 }, { type: 'increment', name: 'demo', count: 15 }]);\n// => inited for 0\n// => should be incremented 20\n")))}u.isMDXComponent=!0}}]);