"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[873],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,s(s({ref:t},c),{},{components:n})):o.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},691:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(2081),r=(n(9496),n(9613));const a={},s="debug",i={unversionedId:"debug/readme",id:"debug/readme",title:"debug",description:"It is helpful to debug your application's logic.",source:"@site/../src/debug/readme.md",sourceDirName:"debug",slug:"/debug/",permalink:"/methods/debug/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/debug/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"debounce",permalink:"/methods/debounce/"},next:{title:"delay",permalink:"/methods/delay/"}},l={},p=[{value:"Motivation",id:"motivation",level:2},{value:"Example",id:"example",level:2},{value:"Traces",id:"traces",level:2},{value:"Custom names",id:"custom-names",level:2},{value:"Fork API and Scope",id:"fork-api-and-scope",level:2},{value:"Scope registration",id:"scope-registration",level:3},{value:"Initial store state",id:"initial-store-state",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"debug"},"debug"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { debug } from 'patronum';\n// or\nimport { debug } from 'patronum/debug';\n")),(0,r.kt)("p",null,"It is helpful to debug your application's logic."),(0,r.kt)("p",null,"Just pass any effector's unit to ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),"."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Sometimes during development, it is necessary to display the value of the stores and payload of events, each time you write ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," inside ",(0,r.kt)("inlineCode",{parentName:"p"},".watch")," and copy/paste it is unpleasant. ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," allows you to speed up this process a lot by passing all the necessary units for a debugging into a method arguments."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, createEvent, createEffect } from 'effector';\nimport { debug } from 'patronum/debug';\n\nconst event = createEvent();\nconst effect = createEffect().use((payload) => Promise.resolve('result' + payload));\nconst $store = createStore(0)\n  .on(event, (state, value) => state + value)\n  .on(effect.done, (state) => state * 10);\n\ndebug($store, event, effect);\n\nevent(5);\neffect('demo');\n\n// => [store] $store 1\n// => [event] event 5\n// => [store] $store 6\n// => [effect] effect demo\n// => [effect] effect.done {\"params\":\"demo\", \"result\": \"resultdemo\"}\n// => [store] $store 60\n")),(0,r.kt)("h2",{id:"traces"},"Traces"),(0,r.kt)("admonition",{title:"since",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"patronum 1.9.0")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"patronum/debug")," supports computation traces logging, if ",(0,r.kt)("inlineCode",{parentName:"p"},"{ trace: true }")," is set.\nIt is recommended to use this feature along with ",(0,r.kt)("inlineCode",{parentName:"p"},"effector/babel-plugin"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const inputChanged = createEvent();\nconst $form = createStore(0).on(inputChanged, (s) => s + 1);\n\ndebug({ trace: true }, $form, submitFx);\n\ninputChanged();\n\n// "[store] $form 0",\n// "[store] $form 1",\n// "[store] $form trace",\n// "<- [store] $form 1",\n// "<- [$form.on] $form.on(inputChanged) 1",\n// "<- [event] inputChanged ",\n')),(0,r.kt)("h2",{id:"custom-names"},"Custom names"),(0,r.kt)("p",null,"Sometimes unit name in specific context may be different from the one it was initially created with.\ne.g., an unit may be exported under an alias for explicitness:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const $productsListVisible = productsPageModel.$open;\nconst productAdded = createEvent();\n\ndebug($productsListVisible, productAdded);\n// or\ndebug({ trace: true }, $productsListVisible, productAdded);\n")),(0,r.kt)("p",null,"In this case, because of ",(0,r.kt)("inlineCode",{parentName:"p"},"effector/babel-plugin")," which provided ",(0,r.kt)("inlineCode",{parentName:"p"},"productsPageModel.$open")," store its name at the moment of its creation, public name in the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," logs will be ",(0,r.kt)("inlineCode",{parentName:"p"},"$open")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"$productsListVisible"),"."),(0,r.kt)("p",null,"It can be fixed with custom name, which can be provided by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, Unit>")," instead of a list of units:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const $productsListVisible = productsPageModel.$open;\nconst productAdded = createEvent();\n\ndebug({ $productsListVisible, customEventName: productAdded });\n// or\ndebug({ trace: true }, { $productsListVisible, customEventName: productAdded });\n")),(0,r.kt)("p",null,"This way ",(0,r.kt)("inlineCode",{parentName:"p"},"$productsListVisible")," name in the logs will be the same, as the one which was provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"productAdded")," event will be named ",(0,r.kt)("inlineCode",{parentName:"p"},"customEventName"),"."),(0,r.kt)("h2",{id:"fork-api-and-scope"},"Fork API and Scope"),(0,r.kt)("p",null,'Effector can run multiple "instances" of the app simultaniosly via Fork API - it is useful for tests and SSR. Usually you would also use scope on the client in the case of SSR. ',(0,r.kt)("inlineCode",{parentName:"p"},"debug"),' will log "scoped" updates in such case:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const up = createEvent();\nconst $count = createStore(0).on(up, (s) => s + 1);\nconst fx = createEffect(() => {});\nsample({\n  clock: $count,\n  target: fx,\n});\n\ndebug(fx);\n\nconst scopeA = fork();\n\nawait allSettled(up, { scope: scopeA });\n\n// "[effect] (scope: unknown_scope_3) fx 1",\n// "[effect] (scope: unknown_scope_3) fx.done {\\\\"params\\\\":1}",\n')),(0,r.kt)("p",null,"By default detected scope will be given default name."),(0,r.kt)("h3",{id:"scope-registration"},"Scope registration"),(0,r.kt)("p",null,"It is possible to explicitly register scope with given name to have a more explicit logs."),(0,r.kt)("p",null,"It can work like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const scope = fork({ values: window.__SSR_VALUES__ });\n\n// this way we can commit this to our repo and be sure,\n// that bundler will cut this out of production bundle\nif (process.env.NODE_ENV === 'development') {\n  debug.registerScope(scope, { name: 'my_client_scope' });\n}\n")),(0,r.kt)("p",null,"This way scope will be given explicit name in the logs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// "[effect] (scope: my_client_scope) fx 1",\n// "[effect] (scope: my_client_scope) fx.done {\\\\"params\\\\":1}",\n')),(0,r.kt)("p",null,"It is also possible to unregister scope to prevent memory leak, if scope is no longer needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const unregister = debug.registerScope(scope, { name: `my_scope` });\n\nunregister();\n")),(0,r.kt)("p",null,"Or unregister all scopes at once:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"debug.unregisterAllScopes();\n")),(0,r.kt)("h3",{id:"initial-store-state"},"Initial store state"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"debug($store)")," always immediatly prints current state of the store, but this state can be different in different scopes.\nIt is recommened to register scopes explicitly, since ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," will print current state of the store in every known scope:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const $count = createStore(0);\n\nconst scopeA = fork({\n  values: [[$count, 42]],\n});\nconst scopeB = fork({\n  values: [[$count, 1337]],\n});\n\ndebug.registerScope(scopeA, { name: \'scope_42\' });\ndebug.registerScope(scopeB, { name: \'scope_1337\' });\n\ndebug($count);\n\n// "[store] $count 0",\n// "[store] (scope: scope_42) $count 42",\n// "[store] (scope: scope_1337) $count 1337",\n')))}u.isMDXComponent=!0}}]);